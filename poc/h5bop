#!/usr/bin/env octave-qf

1;
function usg()
  msg('usage: h5bop dirname h5part\n')
  msg('  converts h5part to bops')
  exit
endfunction
function msg(fmt, varargin); fprintf(stderr(), fmt, [varargin{:}]); endfunction
function err0(fmt, varargin); msg('h5bop: '); msg(fmt, [varargin{:}]); endfunction
function err(fmt, varargin); err0(fmt, varargin{:}); exit(2); endfunction
function rc = cmd(fmt, varargin); rc = system(sprintf(fmt, [varargin{:}])); endfunction

function mkdir0(d); cmd("mkdir -p -- '%s' 2>/dev/null", d); endfunction
function r = mkdir(d);  mkdir0(d); r = cmd("test -d '%s'", d); endfunction
function [rc, D] = load0(f); try D = load(f); rc = 0; catch D = 0; rc = 1; end_try_catch; endfunction
function r = eq(a, b); r = (strcmp(a, b) == 1); endfunction

function [n, B] = unpack(D, f)
  f = sprintf("Step_%d", f);
  x  = D.(f).x;   y = D.(f).y;   z = D.(f).z;
  vx = D.(f).u;  vy = D.(f).v;  vz = D.(f).w;
  type = D.(f).("type"); type = single(type);
  
  n = numel(x);
  B = vertcat(x, y, z, vx, vy, vz, type);
endfunction

function bop(f, v, n)
  f = fopen(f, "w");
  fprintf(f, "%d\n", n);
  fprintf(f, "DATA_FILE: %s\n", v);
  fprintf(f, "DATA_FORMAT: float\n");
  fprintf(f, "VARIABLES: x y z vx vy vz type\n");
  fclose(f);
endfunction

function val(f,  B)
  f = fopen(f, "w");
  fwrite(f, B, "single");
  fclose(f);
endfunction

function n = numf(S); n = numel(fieldnames(S)); endfunction

fmt = "%04d";
nargs = numel(argv());
iargs = 1;

if nargs < 1; err('not enough arguments'); endif
if eq(argv(){iargs}, '-h'); usg(); endif
  
d = argv(){iargs++};
if nargs < 1; err('not enough arguments'); endif
f = argv(){iargs++};

rc = mkdir(d);
if rc != 0; err('cannot create directory %s', d); endif

[rc, D] = load0(f, '-hdf5');
if rc != 0; err('fail to load %s', f); endif
if !isstruct(D); err('%s is not h5part', f); endif

nt = numf(D);
for i=0:nt-1
  [n, B] = unpack(D, i);
  v0 = sprintf(fmt        , i); # value and bop files
  v = sprintf("%s/%s"     , d, v0);
  b  = sprintf("%s/%s.bop", d, v0);
  bop(b, v0, n);
  val(v, B);
endfor
